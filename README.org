Vimrc README -*- mode: org -*-

#+TITLE: My Vim & Emacs Configs
#+AUTUOR: YinJian
#+DATE: 2021.05.12
#+EMAIL: beamiter@163.com
#+KEYWORDS: Vim, Emacs, LSP
#+LANGUAGE: Vimscript, Eclisp

* *Install vim to support python2/3*
Install vim-gtk or vim-gnome first to support compiling with gui.
#+BEGIN_SRC shell
  sudo apt-get build-dep vim-gnome

  ./configure --with-features=huge \
              --enable-multibyte \
              --enable-gui=auto \
              --with-x \
              --enable-rubyinterp=yes \
              --enable-python3interp=yes \
              --enable-perlinterp=yes \
              --enable-fontset \
              --enable-cscope \
              --enable-gtk2-check \
              --enable-gnome-check \
              --prefix=/usr \
              --enable-luainterp=yes \
              --enable-fail-if-missing \

  or

  ./configure --with-features=huge \
              --enable-multibyte \
              --enable-gui=auto \
              --with-x \
              --enable-python3interp=yes \
              --enable-fontset \
              --enable-cscope \
              --enable-gtk2-check \
              --enable-gnome-check \
              --prefix=/usr \
              --enable-luainterp=yes \
              --enable-fail-if-missing \

  make

  sudo make install

  or

  sudo add-apt-repository ppa:jonathonf/vim
  sudo apt install software-properties-common
  sudo apt update
  #with-python3-config-dir is deprecated
              #--with-python3-config-dir=/usr/lib/python3.7/config-3.7m-x86_64-linux-gnu \
#+END_SRC

* *Install python related package*
#+BEGIN_SRC shell
pip3 install --user flake8 autoflake isort coverage yapf autopep8 pylint
conda install flake8 autoflake isort coverage yapf autopep8 pylint
pip3 install python-language-server
#+END_SRC

* *Install rust lsp*
Install rust-analyzer from github release.
#+BEGIN_SRC shell
rustup component add rls rust-analysis rust-src
#+END_SRC

* *Some helpful tips*
1. Install *bat* to support highlight color in fzf preview.
2. Install latest *clangd* version to have better experience.
3. Popular wm: *i3, herbstluft, awesome, spectrwm, bspwm, qtile, xmonad, leftwm*.
4. Helpful toolkits: *dmenu, feh, scrot, flameshot, shutter*.
5. Set git proxy:
   #+begin_src shell
     git clone -c http.proxy=http://127.0.0.1:7890
   #+end_src
6. Set terminal proxy:
   #+begin_src shell
     export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890
   #+end_src
7. Setup bspwm:
  #+BEGIN_SRC shell
    cp /usr/share/doc/oc/bspwm/examples/bspwmrc $HOME/.config/bspwm/
    cp /usr/share/doc/bspwm/examples/sxhkdrc $HOME/.config/sxhkd/

    #Edit $HOME/.xsessionrc
    sxhkd &
    exec bspwm
  #+END_SRC
8. Fix issues:
  #+BEGIN_SRC shell
  #icecc - icecream seems to have invoked itself recursively
  export PATH=/usr/lib/ccache:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  export CCACHE_PREFIX=icecc
  #+END_SRC
9. *Plantuml* is great, *emacs org-mode* is great. 
10. VPN address: https://gsou.buzz/ and so on.
11. config coc clangd semanticHighlighting.
#+BEGIN_SRC json 
{
    "clangd.semanticHighlighting": true
}
#+END_SRC
12. Volumn control in terminal: alsamixer
13. Add dwm.desktop in /usr/share/xsessions/dwm.desktop
    #+begin_example
    i.e. dwm.desktop
    [Desktop Entry]
    Encoding=UTF-8
    Name=Dwm
    Comment=Dynamic window manager
    Exec=dwm
    Icon=dwm
    Type=XSession
    #+end_example
* *More tips*
1. use xrandr to swap monitor position
   #+BEGIN_SRC shell
   xrandr --output eDP-1 --right-of HDMI-1
   xrandr --auto && xrandr --output eDP-1 --off
   xrandr --output HDMI-1 --rotate normal --left-of eDP-1 --auto &
   #+END_SRC
2. bluetooth tools: blueman/blueman-manager in ubuntu
3. xrandr monitor setting
 #+BEGIN_SRC shell
   xrandr --output HDMI-1 --primary --mode 1920x1080 --rotate normal --output eDP-1 --mode 1920x1080 --pos 1920x0 --rotate normal
   hc set_monitors 1920x1080+0+0 1920x1080+1920+0
   xsetroot -cursor_name left_ptr
 #+END_SRC
 god use arandr (another xrandr gui)
4. set 256 color
   #+begin_example
   export TERM=xterm-256color
   #+end_example
5. sudo cp /etc/nixos/configuration.nix ~/vimrc/dotfiles/nixos/
6. old julia lsp set
 #+BEGIN_SRC julia
   julia --project=~/.julia/environments/nvim-lspconfig -e 'using Pkg; Pkg.add("LanguageServer")'
 #+END_SRC
7. npm: mkdir ~/.npm-global, npm config set prefix '~/.npm-global', export PATH=~/.npm-global/bin:$PATH
8. 
 #+BEGIN_SRC shell
   pip3 install -U pip
   pip3 install -U setuptools
   pip3 install --no-cache-dir cairocffi
 #+END_SRC
9. run appimage in docker:
 #+BEGIN_SRC shell
   ~/.local/bin/nvim.appimage --appimage-extract-and-run
   alias nvim="~/.local/bin/nvim.appimage --appimage-extract-and-run"
 #+END_SRC
10. julia install: 
 #+BEGIN_SRC shell
   sudo ln -s /opt/julia-1.6.6/bin/julia /usr/local/bin/julia
 #+END_SRC
11. jill for julia version management
12. bob for neovim version management:
 #+BEGIN_SRC shell
   cargo install bob-nvim
 #+END_SRC
13. 
 #+BEGIN_SRC shell
   git config --global user.name "beamiter"
   git config --global user.email "beamiter@163.com"
   git config --global credential.helper store

   cmake -DGFLAGS_NAMESPACE=google -DCMAKE_CXX_FLAGS=-fPIC -DBUILD_SHARED_LIBS=ON ..
   sudo update-alternatives --config python3
   docker run --rm -ti --net=host -e DISPLAY=$DISPLAY
 #+END_SRC
14. https://www.lazyvim.org/installation
15. for ocaml developing, use "opam user-setup install" frequently
16. fix vim compile error:
 #+BEGIN_SRC shell
   CC=clang CXX=clang++ LD=clang LDFLAGS=-fno-lto ./configure ....
 #+END_SRC
 https://stackoverflow.com/questions/53165474/ncurses-library-is-unusable-during-a-vim-build
17. use PackageCompiler.jl to compile a sysimage of LanguageServer.jl.
 #+BEGIN_SRC shell
   :CocCommand julia.CompileLanguageServerSysimg
 #+END_SRC
18. open notebook in remote machine and open browser in host:
 #+BEGIN_SRC shell
   jupyter notebook --no-browser --port=8889
   jupyter lab --no-browser --port=8889
 #+END_SRC
19. how to run pluto in docker:
 #+BEGIN_SRC shell
   docker run -it -p 8090:8090 julia /bin/bash
   using Pluto; Pluto.run(host="0.0.0.0", port=8090)
 #+END_SRC
20. Use juliaup to manage julia versions
 #+BEGIN_SRC shell
   cargo install juliaup
#+END_SRC
38. Edit julia startup.jl, default in ~/.julia/config/startup.jl
#+BEGIN_SRC julia
  cargo install juliaup
  ENV["JULIA_PKG_SERVER"] = "https://mirrors.ustc.edu.cn/julia"
  ENV["JULIA_PKG_SERVER"] = "https://mirrors.cernet.edu.cn/julia"
  ENV["JULIA_DEPOT_PATH"] = "~/.julia"
#+END_SRC
